import telebot
import time
import random
import logging
from datetime import datetime
from telebot import types

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PATH = 'doc/'
bot_file_path = 'doc/bot.txt'
facts_file_path = 'doc/facts.txt'
menu_file_path = 'doc/menu1.txt'
logo = 'doc/s.png'


# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
def read_file(file_path) -> list[str]:
    with open(file_path, 'r', encoding='utf-8') as file:
        try:
            return [line.strip() for line in file if line.strip()]
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return []


# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
bot_id = read_file(bot_file_path)[0]
bot = telebot.TeleBot(bot_id)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
allowed_users = [123456789, 524849386]  # —Ä–µ–∞–ª—å–Ω—ã–µ user_id
user_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_current_time():
    now = datetime.now()
    day_of_week = days_of_week_ru[now.strftime("%A")]
    current_time = now.strftime("%H:%M")
    current_hour = int(current_time.split(':')[0])
    return now, day_of_week, current_time, current_hour


days_of_week_ru = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

time_open = 12
time_close = 1


# –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", callback_data="working_hours"),
        types.InlineKeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu"),
        types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã", callback_data="fact"),
        types.InlineKeyboardButton("–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è", callback_data="photos"),
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message")
    ]
    markup.add(*buttons)
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        now, day_of_week, current_time, current_hour = get_current_time()

        status = ('–î–≤–µ—Ä–∏ –±—É—Ñ–µ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã...'
                  if (time_open <= current_hour < 24) or (0 <= current_hour < time_close)
                  else '–î–≤–µ—Ä–∏ –±—É—Ñ–µ—Ç–∞ –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã...')

        start_text = (
            f'<b>–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å! {day_of_week}, –≤—Ä–µ–º—è {current_time}.</b>\n'
            f'{status}\n'
            f"–í –±—É—Ñ–µ—Ç–µ <b>\"–®—Ç–æ–ø–æ—Ä\"</b> –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–∫—É—Å–∫–∞–º–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å.\n"
            f"<i>–£ –Ω–∞—Å –ø—Ä–∏—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –±–æ–ª—å—à–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –±–ª—é–¥ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤!</i>\n"
        )

        sti = open(logo, 'rb')
        bot.send_sticker(message.chat.id, sti, message_effect_id='5046509860389126442')
        bot.send_message(message.chat.id, f'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üéâ', parse_mode='HTML')
        bot.send_message(message.chat.id, start_text, parse_mode='HTML')
        markup = create_inline_keyboard()
        bot.send_message(message.chat.id, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ‚ú®", reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
def handle_action(action, message_or_call):
    chat_id = message_or_call.message.chat.id if hasattr(message_or_call, 'message') else message_or_call.chat.id

    if action == 'working_hours':
        bot.send_message(chat_id, text=f"‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {time_open}:00 - {time_close:02}:00", parse_mode='HTML')

    elif action == 'contacts':
        bot.send_message(chat_id, text='''üè™ –ë—É—Ñ–µ—Ç "–®—Ç–æ–ø–æ—Ä" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
üìç –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∏—Ä–æ–≤–∞ 419–ë, –°–∞–º–∞—Ä–∞.
üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +7 (917)8192194''', parse_mode='HTML')
        bot.send_location(chat_id, latitude=53.259035, longitude=50.217374)  # –ü—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

    elif action == 'menu':
        try:
            with open(menu_file_path, 'r', encoding='utf-8') as file:
                menu_text = f'<code>{file.read()}</code>'
            bot.send_message(chat_id, menu_text, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–µ–Ω—é: {e}")

    elif action == 'fact':
        try:
            with open(facts_file_path, 'r', encoding='utf-8') as file:
                lines = file.read().splitlines()
                if not lines:
                    bot.send_message(chat_id, "üßê –§–∞–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                    return
                random_fact = random.choice(lines)
                bot.send_message(chat_id, f'üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {random_fact}')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤: {e}")

    elif action == 'photos':
        photo_paths = ['doc/photo1.jpg', 'doc/photo2.jpg', 'doc/photo3.jpg', 'doc/photo4.jpg', 'doc/photo5.jpg']
        for photo_path in photo_paths:
            try:
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo)
                    time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–æ—Ç–æ
            except Exception as e:
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                break

    elif action == 'send_message':
        bot.send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "–ò–º—è: <–í–∞—à–µ –∏–º—è>\n"
                                  "–¢–µ–ª–µ—Ñ–æ–Ω: <–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω>\n"
                                  "–°–æ–æ–±—â–µ–Ω–∏–µ: <–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>")
        if hasattr(message_or_call, 'message'):
            bot.register_next_step_handler(message_or_call.message, process_contact_info)
        else:
            bot.register_next_step_handler(message_or_call, process_contact_info)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    handle_action(call.data, call)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['working_hours', 'contacts', 'menu', 'fact', 'photos', 'send_message'])
def command_handler(message):
    action = message.text.lstrip('/').lower()
    handle_action(action, message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def process_contact_info(message):
    try:
        data = {}
        lines = message.text.split('\n')
        for line in lines:
            key, value = line.split(': ', 1)
            data[key.strip()] = value.strip()
        name = data.get('–ò–º—è')
        phone = data.get('–¢–µ–ª–µ—Ñ–æ–Ω')
        mes = data.get('–°–æ–æ–±—â–µ–Ω–∏–µ')
        if not all([name, phone, mes]):
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
        bot.send_message(message.chat.id, f"‚úÖ –°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n"
                                          f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                                          f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {mes}")
    except ValueError as ve:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {ve}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def send_help(message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/working_hours - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n"
        "/contacts - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/menu - –ú–µ–Ω—é\n"
        "/fact - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "/photos - –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è\n"
        "/send_message - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')


if __name__ == '__main__':
    print('ü§ñ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!')
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        print('üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')
    except Exception as e:
        print(f'‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')
    finally:
        print('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...')