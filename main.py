import telebot
import time
import random
import logging
from datetime import datetime
from telebot import types

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PATH = 'doc/'
BOT_FILE_PATH = 'doc/bot.txt'
FACTS_FILE_PATH = 'doc/facts.txt'
MENU_FILE_PATH = 'doc/menu1.txt'
LOGO_PATH = 'doc/s.png'
LOG_FILE = 'doc/sent_messages.log'  # –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
ALLOWED_USERS = [524849386, 123456789]  # —Ä–µ–∞–ª—å–Ω—ã–µ user_id
user_states = {}

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
DAYS_OF_WEEK_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

TIME_OPEN = 12
TIME_CLOSE = 1

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open(BOT_FILE_PATH, 'r', encoding='utf-8') as file:
        BOT_TOKEN = file.read().strip()
except FileNotFoundError:
    logging.error("–§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_current_time():
    now = datetime.now()
    day_of_week = DAYS_OF_WEEK_RU[now.strftime("%A")]
    current_time = now.strftime("%H:%M")
    current_hour = int(current_time.split(':')[0])
    return now, day_of_week, current_time, current_hour

# –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def start_text():
    _, day_of_week, current_time, current_hour = get_current_time()
    status = (
        '–î–≤–µ—Ä–∏ –±—É—Ñ–µ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã...'
        if (TIME_OPEN <= current_hour < 24) or (0 <= current_hour < TIME_CLOSE)
        else '–î–≤–µ—Ä–∏ –±—É—Ñ–µ—Ç–∞ –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã...'
    )
    return (
        f'<b>–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å! {day_of_week}, –≤—Ä–µ–º—è {current_time}.</b>\n'
        f'{status}\n'
        f"–í –±—É—Ñ–µ—Ç–µ <b>\"–®—Ç–æ–ø–æ—Ä\"</b> –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–∫—É—Å–∫–∞–º–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏."
    )

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def log_sent_message(user_id, first_name, phone, text):
    log_entry = {
        'user_id': user_id,
        'first_name': first_name,
        'phone': phone or "–ù–µ —É–∫–∞–∑–∞–Ω",
        'text': text,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    try:
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{log_entry}\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(message):
    return message.from_user.id in ALLOWED_USERS

# –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", callback_data="working_hours"),
        types.InlineKeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu"),
        types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã", callback_data="fact"),
        types.InlineKeyboardButton("–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è", callback_data="photos"),
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="letter")
    ]
    markup.add(*buttons)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        with open(LOGO_PATH, 'rb') as logo:
            bot.send_sticker(message.chat.id, logo)
    except FileNotFoundError:
        logging.error("–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    bot.send_message(message.chat.id, f'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üéâ', parse_mode='HTML')
    bot.send_message(message.chat.id, start_text(), parse_mode='HTML')
    markup = create_inline_keyboard()
    bot.send_message(message.chat.id, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ‚ú®", reply_markup=markup)

# –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
def process_contact(call):
    user_id = call.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_contact = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    markup.add(button_contact)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    sent_message = bot.send_message(
        call.message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
        reply_markup=markup
    )
    user_states[user_id] = {"message_id": sent_message.message_id, "state": "awaiting_contact"}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)

    if not user_state or user_state.get("state") != "awaiting_contact":
        return

    phone_number = message.contact.phone_number if message.contact else None
    user_states[user_id] = {"phone": phone_number, "state": "awaiting_message"}

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        bot.send_message(
            message.chat.id,
            "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        )

        # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_user_message_with_contact)

    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
def process_user_message_with_contact(message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)

    if not user_state or user_state.get("state") != "awaiting_message":
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    phone_number = user_state.get("phone")
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        log_sent_message(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            phone=phone_number,
            text=message.text
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = ALLOWED_USERS[0]
        user_info = (
            f"ID: {message.from_user.id}\n"
            f"–ò–º—è: {message.from_user.first_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        bot.send_message(admin_id, user_info)
        bot.send_message(message.chat.id, f"{message.from_user.first_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)

# –ö–æ–º–∞–Ω–¥–∞ /logs
@bot.message_handler(commands=['logs'])
def show_logs(message):
    if not is_admin(message):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
        return
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            logs = f.readlines()[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        for entry in logs:
            data = eval(entry.strip())  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            response += (
                f"–û—Ç: {data['first_name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"–í—Ä–µ–º—è: {data['timestamp']}\n"
                f"–¢–µ–∫—Å—Ç: {data['text']}\n---\n"
            )
        bot.send_message(message.chat.id, response)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "‚ùå –õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /upload
@bot.message_handler(commands=['upload'])
def upload_command(message):
    if is_admin(message):
        user_states[message.from_user.id] = "awaiting_file"
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    user_id = message.from_user.id
    if user_states.get(user_id) != "awaiting_file":
        return
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_path = f"{PATH}/{message.document.file_name}"
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    logging.info(f"User {user_id} uploaded file: {message.document.file_name}")
    user_states.pop(user_id, None)
    bot.reply_to(message, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    action = call.data
    chat_id = call.message.chat.id

    if action == 'working_hours':
        bot.send_message(chat_id, f"‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {TIME_OPEN}:00 - {TIME_CLOSE:02}:00", parse_mode='HTML')
    elif action == 'contacts':
        bot.send_message(chat_id, '''üè™ –ë—É—Ñ–µ—Ç "–®—Ç–æ–ø–æ—Ä" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
üìç –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∏—Ä–æ–≤–∞ 419–ë, –°–∞–º–∞—Ä–∞.
üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +7 (917)8192194''', parse_mode='HTML')
        bot.send_location(chat_id, latitude=53.259035, longitude=50.217374)
    elif action == 'menu':
        try:
            with open(MENU_FILE_PATH, 'r', encoding='utf-8') as file:
                menu_text = f'<code>{file.read()}</code>'
            bot.send_message(chat_id, menu_text, parse_mode='HTML')
        except FileNotFoundError:
            bot.send_message(chat_id, "‚ùå –ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    elif action == 'fact':
        try:
            with open(FACTS_FILE_PATH, 'r', encoding='utf-8') as file:
                lines = file.read().splitlines()
                if not lines:
                    bot.send_message(chat_id, "üßê –§–∞–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                    return
                random_fact = random.choice(lines)
                bot.send_message(chat_id, f'üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {random_fact}')
        except FileNotFoundError:
            bot.send_message(chat_id, "‚ùå –§–∞–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    elif action == 'photos':
        photo_paths = ['doc/photo1.jpg', 'doc/photo2.jpg', 'doc/photo3.jpg', 'doc/photo4.jpg', 'doc/photo5.jpg']
        sent_messages = []
        for photo_path in photo_paths:
            try:
                with open(photo_path, 'rb') as photo:
                    msg = bot.send_photo(chat_id, photo)
                    sent_messages.append(msg.message_id)
                    time.sleep(1)
            except FileNotFoundError:
                bot.send_message(chat_id, f"‚ùå –§–æ—Ç–æ {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                break
        time.sleep(10)
        for msg_id in sent_messages:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    elif action == 'letter':
        process_contact(call)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def send_help(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/working_hours - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/contacts - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/menu - –ú–µ–Ω—é\n"
        "/fact - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "/photos - –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è\n"
        "/letter - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    if is_admin(message):
        help_text += (
            "\n-------------------------------\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
            "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª\n"
            "/logs - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏\n"
        )
    bot.send_message(message.chat.id, help_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print('ü§ñ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!')
    while True:
        try:
            bot.polling(none_stop=True)
        except KeyboardInterrupt:
            print('üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')
            break
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    print('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...')
