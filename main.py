import telebot
import time
import random
import logging
from datetime import datetime
from telebot import types

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PATH = 'doc/'
bot_file_path = 'doc/bot.txt'
facts_file_path = 'doc/facts.txt'
menu_file_path = 'doc/menu1.txt'
logo = 'doc/s.png'
log_file = 'doc/sent_messages.log'  # –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

text1 = '''–ë—É—Ñ–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —É–¥–æ–±–Ω—ã–º –º–µ—Å—Ç–æ–º –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ó–∞–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞–∫ –Ω–∞–ø–∏—Ç–∫–∏, —Ç–∞–∫ –∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫—É—Å–∫–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏ –≥–æ—Ç–æ–≤–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è. ‚åö'''

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
bot_id = open(bot_file_path, 'r', encoding='utf-8').read().strip()
bot = telebot.TeleBot(bot_id)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
allowed_users = [524849386, 123456789]  # —Ä–µ–∞–ª—å–Ω—ã–µ user_id
user_states = {}

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
days_of_week_ru = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

time_open = 12
time_close = 1


def get_current_time():
    now = datetime.now()
    day_of_week = days_of_week_ru[now.strftime("%A")]
    current_time = now.strftime("%H:%M")
    current_hour = int(current_time.split(':')[0])
    return now, day_of_week, current_time, current_hour

# –ö–æ–º–∞–Ω–¥–∞ /upload
@bot.message_handler(commands=['upload'])
def upload_command(message):
    if message.from_user.id not in allowed_users:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.")
        return
    user_states[message.from_user.id] = "awaiting_file"
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")


@bot.message_handler(content_types=['document'])
def handle_document(message):
    user_id = message.from_user.id
    if user_states.get(user_id) != "awaiting_file":
        return

    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_path = f"{PATH}/{message.document.file_name}"

    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    logging.info(f"User {user_id} uploaded file: {message.document.file_name}")
    user_states.pop(user_id, None)
    bot.reply_to(message, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def log_sent_message(user_id, first_name, last_name, username, text):
    with open(log_file, 'a', encoding='utf-8') as f:
        log_entry = {
            'user_id': user_id,
            'first_name': first_name,
            'last_name': last_name or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
            'username': username or "–ù–µ —É–∫–∞–∑–∞–Ω",
            'text': text,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        f.write(f"{log_entry}\n")


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
# @bot.message_handler(commands=['send_message'])
# def send_message_command(message):
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
#     bot.register_next_step_handler(message, process_user_message)


def process_user_message(message):
    try:
        user_info = f'''ID: {message.from_user.id}
–ò–º—è: {message.from_user.first_name}
–§–∞–º–∏–ª–∏—è: {message.from_user.last_name or ""}
Username: @{message.from_user.username or ""}
–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'''

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        log_sent_message(
            message.from_user.id,
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.username,
            message.text
        )
        logging.info(f"User {message.from_user.id}:{message.from_user.first_name} Username:@{message.from_user.username or ''} send message: {message.text}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = allowed_users[0]
        bot.send_message(admin_id, user_info)
        bot.send_message(message.chat.id, f"{message.from_user.first_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
@bot.message_handler(commands=['logs'])
def show_logs(message):
    if message.from_user.id not in allowed_users:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
        return

    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            logs = f.readlines()[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        for entry in logs:
            data = eval(entry.strip())
            response += (
                f"–û—Ç: {data['first_name']} {data['last_name'] or ''} (@{data['username']})\n"
                f"–í—Ä–µ–º—è: {data['timestamp']}\n"
                f"–¢–µ–∫—Å—Ç: {data['text']}\n---\n"
            )
        bot.send_message(message.chat.id, response)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", callback_data="working_hours"),
        types.InlineKeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu"),
        types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã", callback_data="fact"),
        types.InlineKeyboardButton("–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è", callback_data="photos"),
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message")
    ]
    markup.add(*buttons)
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    now, day_of_week, current_time, current_hour = get_current_time()
    status = ('–î–≤–µ—Ä–∏ –±—É—Ñ–µ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã...'
              if (time_open <= current_hour < 24) or (0 <= current_hour < time_close)
              else '–î–≤–µ—Ä–∏ –±—É—Ñ–µ—Ç–∞ –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã...')

    start_text = (
        f'<b>–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å! {day_of_week}, –≤—Ä–µ–º—è {current_time}.</b>\n'
        f'{status}\n'
        f"–í –±—É—Ñ–µ—Ç–µ <b>\"–®—Ç–æ–ø–æ—Ä\"</b> –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–∫—É—Å–∫–∞–º–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏.\n"
        f"<i>–£ –Ω–∞—Å –ø—Ä–∏—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –±–æ–ª—å—à–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –±–ª—é–¥ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤!</i>\n"
    )

    sti = open(logo, 'rb')
    bot.send_sticker(message.chat.id, sti, message_effect_id='5046509860389126442')
    bot.send_message(message.chat.id, f'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üéâ', parse_mode='HTML')
    bot.send_message(message.chat.id, start_text, parse_mode='HTML')
    markup = create_inline_keyboard()
    bot.send_message(message.chat.id, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ‚ú®", reply_markup=markup)


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ inline-–∫–Ω–æ–ø–æ–∫
def handle_action(action, chat_id):
    if action == 'working_hours':
        bot.send_message(chat_id, text=f"{text1}\n\n‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {time_open}:00 - {time_close:02}:00",
                         parse_mode='HTML', message_effect_id='5046509860389126442')

    elif action == 'contacts':
        bot.send_message(chat_id, text='''üè™ –ë—É—Ñ–µ—Ç "–®—Ç–æ–ø–æ—Ä" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
üìç –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∏—Ä–æ–≤–∞ 419–ë, –°–∞–º–∞—Ä–∞.
üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +7 (917)8192194''', parse_mode='HTML')
        bot.send_location(chat_id, latitude=53.259035, longitude=50.217374)

    elif action == 'menu':
        try:
            with open(menu_file_path, 'r', encoding='utf-8') as file:
                menu_text = f'<code>{file.read()}</code>'
            bot.send_message(chat_id, menu_text, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–µ–Ω—é: {e}")

    elif action == 'fact':
        try:
            with open(facts_file_path, 'r', encoding='utf-8') as file:
                lines = file.read().splitlines()
                if not lines:
                    bot.send_message(chat_id, "üßê –§–∞–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                    return
                random_fact = random.choice(lines)
                bot.send_message(chat_id, f'üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {random_fact}',
                                 message_effect_id='5046509860389126442')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤: {e}")

    elif action == 'photos':
        photo_paths = ['doc/photo1.jpg', 'doc/photo2.jpg', 'doc/photo3.jpg', 'doc/photo4.jpg', 'doc/photo5.jpg']
        sent_messages = []

        for photo_path in photo_paths:
            try:
                with open(photo_path, 'rb') as photo:
                    msg = bot.send_photo(chat_id, photo)
                    sent_messages.append(msg.message_id)
                    time.sleep(1)
            except Exception as e:
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                break

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        time.sleep(10)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
        for msg_id in sent_messages:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

    elif action == 'send_message':
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler_by_chat_id(chat_id, process_user_message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    handle_action(call.data, call.message.chat.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['working_hours', 'contacts', 'menu', 'fact', 'photos', 'send_message'])
def command_handler(message):
    action = message.text.lstrip('/').lower()  # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ lowercase
    handle_action(action, message.chat.id)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def send_help(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/working_hours - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n"
        "/contacts - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/menu - –ú–µ–Ω—é\n"
        "/fact - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "/photos - –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è\n"
        "/send_message - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    bot.send_message(message.chat.id, help_text)


if __name__ == '__main__':
    print('ü§ñ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!')
    while True:
        try:
            bot.polling(none_stop=True)
        except KeyboardInterrupt:
            print('üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')
            break
        except Exception as e:
            print(f'‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')
            time.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    print('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...')